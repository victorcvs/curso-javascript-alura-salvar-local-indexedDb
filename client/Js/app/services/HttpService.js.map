{"version":3,"sources":["../../app-es6/services/HttpService.js"],"names":["HttpService","res","ok","console","log","statusText","Error","url","fetch","then","_handleErrors","json","dado","headers","method","body","JSON","stringify"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+CAAaA,W;;;;;;;sEAEKC,G,EAAK;AACf,oDAAGA,IAAIC,EAAP,EAAW;AACP,+DAAOD,GAAP;AACH,iDAFD,MAEO;AACHE,gEAAQC,GAAR,CAAYH,IAAII,UAAhB;AACA,8DAAM,IAAIC,KAAJ,CAAUL,IAAII,UAAd,CAAN;AACH;AACJ;;;4DAEGE,G,EAAK;AAAA;;AACL;AACA,uDAAOC,MAAMD,GAAN,EACEE,IADF,CACO;AAAA,+DAAO,MAAKC,aAAL,CAAmBT,GAAnB,CAAP;AAAA,iDADP,EAEEQ,IAFF,CAEO;AAAA,+DAAOR,IAAIU,IAAJ,EAAP;AAAA,iDAFP,CAAP;;AAIA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;;6DAEIJ,G,EAAKK,I,EAAM;AAAA;;AAEZ,uDAAOJ,MAAMD,GAAN,EAAW;AACNM,iEAAS,EAAC,gBAAe,kBAAhB,EADH;AAENC,gEAAQ,MAFF;AAGNC,8DAAMC,KAAKC,SAAL,CAAeL,IAAf,CAHA,EAAX,EAICH,IAJD,CAIM;AAAA,+DAAO,OAAKC,aAAL,CAAmBT,GAAnB,CAAP;AAAA,iDAJN,CAAP;;AAMA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACH","file":"HttpService.js","sourcesContent":["export class HttpService {\r\n\r\n    _handleErrors(res) {\r\n        if(res.ok) {\r\n            return res;\r\n        } else {\r\n            console.log(res.statusText);\r\n            throw new Error(res.statusText);\r\n        }\r\n    }\r\n\r\n    get(url) { \r\n        // nova API fetch do ES2016\r\n        return fetch(url)\r\n                .then(res => this._handleErrors(res))\r\n                .then(res => res.json())    \r\n\r\n        // return new Promise((resolve, reject) => {\r\n        //     let xhr = new XMLHttpRequest();\r\n\r\n        //     xhr.open('GET', url);\r\n\r\n        //     xhr.onreadystatechange = () => {    \r\n        //         if (xhr.readyState == 4) {\r\n        //             if (xhr.status == 200) {  \r\n        //                 resolve(JSON.parse(xhr.responseText)); \r\n        //             } else {\r\n        //                 console.log(xhr.responseText);\r\n        //                 reject(xhr.responseText);\r\n        //             }\r\n        //         }\r\n        //     };\r\n        //     xhr.send();   \r\n        // });\r\n    }\r\n\r\n    post(url, dado) {\r\n\r\n        return fetch(url, {\r\n                    headers: {'Content-type':'application/json'},\r\n                    method: 'POST',\r\n                    body: JSON.stringify(dado)})\r\n               .then(res => this._handleErrors(res))\r\n\r\n        // return new Promise((resolve, reject) => {\r\n\r\n        //     let xhr = new XMLHttpRequest();\r\n        //     xhr.open(\"POST\", url, true);\r\n        //     xhr.setRequestHeader(\"Content-type\", \"application/json\");\r\n        //     xhr.onreadystatechange = () => {\r\n\r\n        //         if (xhr.readyState == 4) {\r\n\r\n        //             if (xhr.status == 200) {\r\n\r\n        //                 resolve(JSON.parse(xhr.responseText));\r\n        //             } else {\r\n\r\n        //                 reject(xhr.responseText);\r\n        //             }\r\n        //         }\r\n        //     };\r\n        //     xhr.send(JSON.stringify(dado)); // usando JSON.stringifly para converter objeto em uma string no formato JSON.\r\n        // });\r\n    }\r\n}"]}