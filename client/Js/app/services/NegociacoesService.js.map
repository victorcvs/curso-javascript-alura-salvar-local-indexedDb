{"version":3,"sources":["../../app-es6/services/NegociacoesService.js"],"names":["HttpService","NegociacaoDao","Negociacao","ConnectionFactory","NegociacoesService","_http","negociacao","getConnection","then","connection","dao","adiciona","catch","console","log","erro","Error","listaTodos","apagaTodos","listaAtual","obterNegociacoes","negociacoes","filter","some","isEqual","negociacaoExistente","get","map","Date","objeto","data","quantidade","valor","Promise","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","periodos","reduce","dados","periodo","concat","dado"],"mappings":";;;;;;;;;;;;;;;AAAQA,uB,kBAAAA,W;;AACAC,yB,uBAAAA,a;;AACAC,sB,uBAAAA,U;;AACAC,6B,wBAAAA,iB;;;;;;;;;;;;;;;;;;;;;0CAEKC,kB;AACT,8CAAc;AAAA;;AACV,yBAAKC,KAAL,GAAa,IAAIL,WAAJ,EAAb;AACH;;;;6CAEQM,U,EAAY;AACjB,+BAAOH,kBAAqD;AAArD,yBACEI,aADF,GACqD;AADrD,yBAEEC,IAFF,CAEO;AAAA,mCAAc,IAAIP,aAAJ,CAAkBQ,UAAlB,CAAd;AAAA,yBAFP,EAEqD;AAFrD,yBAGED,IAHF,CAGO;AAAA,mCAAOE,IAAIC,QAAJ,CAAaL,UAAb,CAAP;AAAA,yBAHP,EAGqD;AAHrD,yBAIEE,IAJF,CAIO;AAAA,mCAAM,kCAAN;AAAA,yBAJP,EAIqD;AAJrD,yBAKEI,KALF,CAKQ,gBAAQ;AACXC,oCAAQC,GAAR,CAAYC,IAAZ;AACA,kCAAM,IAAIC,KAAJ,CAAU,gCAAV,CAAN;AAAkD,yBAPvD,CAAP;AAQH;;;4CAEO;AACJ,+BAAOb,kBACEI,aADF,GAEEC,IAFF,CAEO;AAAA,mCAAc,IAAIP,aAAJ,CAAkBQ,UAAlB,CAAd;AAAA,yBAFP,EAGED,IAHF,CAGO;AAAA,mCAAOE,IAAIO,UAAJ,EAAP;AAAA,yBAHP,EAGkC;AAHlC,yBAIEL,KAJF,CAIQ,gBAAQ;AACXC,oCAAQC,GAAR,CAAYC,IAAZ;AACA,kCAAM,IAAIC,KAAJ,CAAU,kCAAV,CAAN;AAAoD,yBANzD,CAAP;AAOH;;;4CAEO;AACJ,+BAAQb,kBACCI,aADD,GAECC,IAFD,CAEM;AAAA,mCAAc,IAAIP,aAAJ,CAAkBQ,UAAlB,CAAd;AAAA,yBAFN,EAGCD,IAHD,CAGM;AAAA,mCAAOE,IAAIQ,UAAJ,EAAP;AAAA,yBAHN;AAIJ;AAJI,yBAKCN,KALD,CAKO,gBAAQ;AACNC,oCAAQC,GAAR,CAAYC,IAAZ;AACD,kCAAM,IAAIC,KAAJ,CAAU,kCAAV,CAAN;AAAoD,yBAP5D,CAAR;AAQH;;;4CAEOG,U,EAAY;AAChB,+BAAO,KAAKC,gBAAL;AACP;AADO,yBAEFZ,IAFE,CAEG;AAAA,mCACEa,YAAYC,MAAZ,CAAmB;AAAA,uCAAyB;AACxC,qCAACH,WAAWI,IAAX,CAAgB;AAAA,+CAAuB;AACpCjB,uDAAWkB,OAAX,CAAmBC,mBAAnB;AADa;AAAA,qCAAhB;AADc;AAAA,6BAAnB,CADF;AAAA,yBAFH,EAMC;AAND,yBAOFb,KAPE,CAOI,gBAAO;AACVC,oCAAQC,GAAR,CAAYC,IAAZ;AACA,kCAAM,IAAIC,KAAJ,CAAU,oCAAV,CAAN;AACH,yBAVE,CAAP;AAWH;;;+DAE0B;;AAEvB,+BAAO,KAAKX,KAAL,CACFqB,GADE,CACE,oBADF,EAEFlB,IAFE,CAEG,uBAAe;AACjBK,oCAAQC,GAAR,CAAYO,WAAZ;AACA,mCAAOA,YAAYM,GAAZ,CAAgB;AAAA,uCAAU,IAAIzB,UAAJ,CAAe,IAAI0B,IAAJ,CAASC,OAAOC,IAAhB,CAAf,EAAsCD,OAAOE,UAA7C,EAAyDF,OAAOG,KAAhE,CAAV;AAAA,6BAAhB,CAAP;AACH,yBALE,EAMFpB,KANE,CAMI,gBAAQ;AACXC,oCAAQC,GAAR,CAAYC,IAAZ;AACA,kCAAM,IAAIC,KAAJ,CAAU,iDAAV,CAAN;AACH,yBATE,CAAP;AAUH;;;uEAEkC;;AAE/B,+BAAO,KAAKX,KAAL,CACFqB,GADE,CACE,sBADF,EAEFlB,IAFE,CAEG,uBAAe;AACjBK,oCAAQC,GAAR,CAAYO,WAAZ;AACA,mCAAOA,YAAYM,GAAZ,CAAgB;AAAA,uCAAU,IAAIzB,UAAJ,CAAe,IAAI0B,IAAJ,CAASC,OAAOC,IAAhB,CAAf,EAAsCD,OAAOE,UAA7C,EAAyDF,OAAOG,KAAhE,CAAV;AAAA,6BAAhB,CAAP;AACH,yBALE,EAMFpB,KANE,CAMI,gBAAQ;AACXC,oCAAQC,GAAR,CAAYC,IAAZ;AACA,kCAAM,IAAIC,KAAJ,CAAU,0DAAV,CAAN;AACH,yBATE,CAAP;AAUH;;;wEAEmC;;AAEhC,+BAAO,KAAKX,KAAL,CACFqB,GADE,CACE,uBADF,EAEFlB,IAFE,CAEG,uBAAe;AACjBK,oCAAQC,GAAR,CAAYO,WAAZ;AACA,mCAAOA,YAAYM,GAAZ,CAAgB;AAAA,uCAAU,IAAIzB,UAAJ,CAAe,IAAI0B,IAAJ,CAASC,OAAOC,IAAhB,CAAf,EAAsCD,OAAOE,UAA7C,EAAyDF,OAAOG,KAAhE,CAAV;AAAA,6BAAhB,CAAP;AACH,yBALE,EAMFpB,KANE,CAMI,gBAAQ;AACXC,oCAAQC,GAAR,CAAYC,IAAZ;AACA,kCAAM,IAAIC,KAAJ,CAAU,2DAAV,CAAN;AACH,yBATE,CAAP;AAWH;;;uDAEkB;;AAEf,+BAAOiB,QAAQC,GAAR,CAAY,CACf,KAAKC,wBAAL,EADe,EAEf,KAAKC,gCAAL,EAFe,EAGf,KAAKC,iCAAL,EAHe,CAAZ,EAIJ7B,IAJI,CAIC,oBAAY;;AAEhB,gCAAIa,cAAciB,SACbC,MADa,CACN,UAACC,KAAD,EAAQC,OAAR;AAAA,uCAAoBD,MAAME,MAAN,CAAaD,OAAb,CAApB;AAAA,6BADM,EACqC,EADrC,EAEbd,GAFa,CAET;AAAA,uCAAQ,IAAIzB,UAAJ,CAAe,IAAI0B,IAAJ,CAASe,KAAKb,IAAd,CAAf,EAAoCa,KAAKZ,UAAzC,EAAqDY,KAAKX,KAA1D,CAAR;AAAA,6BAFS,CAAlB;;AAIA,mCAAOX,WAAP;AACH,yBAXM,EAWJT,KAXI,CAWE,gBAAQ;AACb,kCAAM,IAAII,KAAJ,CAAUD,IAAV,CAAN;AACH,yBAbM,CAAP;AAcN","file":"NegociacoesService.js","sourcesContent":["import {HttpService} from \"./HttpService.js\";\r\nimport {NegociacaoDao} from \"../dao/NegociacaoDao.js\";\r\nimport {Negociacao} from \"../models/Negociacao.js\";\r\nimport {ConnectionFactory} from \"./ConnectionFactory.js\"\r\n\r\nexport class NegociacoesService {\r\n    constructor() {\r\n        this._http = new HttpService();\r\n    }\r\n\r\n    cadastra(negociacao) {\r\n        return ConnectionFactory                                    //return pra devolver a promisse\r\n                .getConnection()                                    //cria e retorna connection\r\n                .then(connection => new NegociacaoDao(connection))  // cria e retorna dao\r\n                .then(dao => dao.adiciona(negociacao))              // executa 'adciona'\r\n                .then(() => 'Negociação incluída com sucesso.')     // devolve mensagem de sucesso\r\n                .catch(erro => {\r\n                    console.log(erro)\r\n                    throw new Error('Erro na inclusão da negociação')});\r\n    }\r\n\r\n    lista() {\r\n        return ConnectionFactory\r\n                .getConnection()\r\n                .then(connection => new NegociacaoDao(connection))\r\n                .then(dao => dao.listaTodos())   //lista e já retorna\r\n                .catch(erro => {\r\n                    console.log(erro)\r\n                    throw new Error('Erro na listagem das negociações')});\r\n    }\r\n\r\n    apaga() {\r\n        return  ConnectionFactory\r\n                .getConnection()\r\n                .then(connection => new NegociacaoDao(connection))\r\n                .then(dao => dao.apagaTodos())\r\n            //  .then(() => 'Negociação apagadas com sucesso.')     // repassa mensagem vinda do dao\r\n                .catch(erro => {\r\n                         console.log(erro)\r\n                        throw new Error('Erro na exclusão das negociações')});\r\n    }\r\n\r\n    importa(listaAtual) {\r\n        return this.obterNegociacoes()\r\n        // É preciso filtrar as negociações que já estão na lista. Inclui somente se não existir\r\n            .then(negociacoes => \r\n                    negociacoes.filter(negociacao =>            // filtra a lista conforme uma condição\r\n                        !listaAtual.some(negociacaoExistente => // 'some' verifica se contém algum (se existir aqui o ! garante o retun false)\r\n                            negociacao.isEqual(negociacaoExistente)))\r\n            )   // retorna a lista de negociacoes importadas\r\n            .catch(erro =>{\r\n                console.log(erro);\r\n                throw new Error('Erro na importação das negociações');\r\n            } )\r\n    }\r\n\r\n    obterNegociacoesDaSemana() {\r\n               \r\n        return this._http\r\n            .get('negociacoes/semana')\r\n            .then(negociacoes => {\r\n                console.log(negociacoes);\r\n                return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\r\n            })\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível obter as negociações da semana');\r\n            });  \r\n    }\r\n    \r\n    obterNegociacoesDaSemanaAnterior() {\r\n               \r\n        return this._http\r\n            .get('negociacoes/anterior')\r\n            .then(negociacoes => {\r\n                console.log(negociacoes);\r\n                return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\r\n            })\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível obter as negociações da semana anterior');\r\n            });   \r\n    }\r\n    \r\n    obterNegociacoesDaSemanaRetrasada() {\r\n               \r\n        return this._http\r\n            .get('negociacoes/retrasada')\r\n            .then(negociacoes => {\r\n                console.log(negociacoes);\r\n                return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\r\n            })\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível obter as negociações da semana retrasada');\r\n            });  \r\n        \r\n    }\r\n    \r\n    obterNegociacoes() {\r\n        \r\n        return Promise.all([\r\n            this.obterNegociacoesDaSemana(),\r\n            this.obterNegociacoesDaSemanaAnterior(),\r\n            this.obterNegociacoesDaSemanaRetrasada()\r\n        ]).then(periodos => {\r\n\r\n            let negociacoes = periodos\r\n                .reduce((dados, periodo) => dados.concat(periodo), [])\r\n                .map(dado => new Negociacao(new Date(dado.data), dado.quantidade, dado.valor ));\r\n\r\n            return negociacoes;\r\n        }).catch(erro => {\r\n            throw new Error(erro);\r\n        });\r\n\t}     \r\n}"]}