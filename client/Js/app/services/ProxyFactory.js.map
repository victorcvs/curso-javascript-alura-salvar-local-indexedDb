{"version":3,"sources":["../../app-es6/services/ProxyFactory.js"],"names":["ProxyFactory","objeto","props","acao","Proxy","get","target","prop","receiver","includes","_ehFuncao","console","log","retorno","Reflect","apply","arguments","set","value","f","Function"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oCAAaA,Y;;;;;;;2CACMC,M,EAAQC,K,EAAOC,I,EAAM;;AAEhC,+BAAO,IAAIC,KAAJ,CAAUH,MAAV,EAAkB;AACrBI,+BADqB,eACjBC,MADiB,EACTC,IADS,EACHC,QADG,EACO;AACxB;AACA,oCAAIN,MAAMO,QAAN,CAAeF,IAAf,KAAwBP,aAAaU,SAAb,CAAuBJ,OAAOC,IAAP,CAAvB,CAA5B,EAAkE;AAC/DI,4CAAQC,GAAR,8BAAoCL,IAApC;AACA,2CAAO,YAAW;AAAK;AACnB;;AAEA;AACA,4CAAIM,UAAUC,QAAQC,KAAR,CAAcT,OAAOC,IAAP,CAAd,EAA4BD,MAA5B,EAAoCU,SAApC,CAAd,CAJc,CAIgD;AAC9Db,6CAAKG,MAAL,EALc,CAKC;AACf,+CAAOO,OAAP;AACF,qCAPF;AAQF;;AAED,uCAAOC,QAAQT,GAAR,CAAYC,MAAZ,EAAoBC,IAApB,EAA0BC,QAA1B,CAAP,CAdwB,CAcoB;AAC/C,6BAhBoB;AAkBrBS,+BAlBqB,eAkBjBX,MAlBiB,EAkBTC,IAlBS,EAkBHW,KAlBG,EAkBIV,QAlBJ,EAkBc;AAC/BG,wCAAQC,GAAR,2BAAoCL,IAApC;AACA,oCAAIM,UAAUC,QAAQG,GAAR,CAAYX,MAAZ,EAAoBC,IAApB,EAA0BW,KAA1B,EAAiCV,QAAjC,CAAd;;AAEA,oCAAIN,MAAMO,QAAN,CAAeF,IAAf,CAAJ,EAA0B;AACtBJ,yCAAKG,MAAL;AACH;AACD,uCAAOO,OAAP;AACH;AA1BoB,yBAAlB,CAAP;AA6BH;;;8CACgBM,C,EAAG;AAChB,+BAAO,QAAOA,CAAP,yCAAOA,CAAP,cAAqBC,QAArB,yCAAqBA,QAArB,EAAP;AACH","file":"ProxyFactory.js","sourcesContent":["export class ProxyFactory {\r\n    static create (objeto, props, acao) {\r\n\r\n        return new Proxy(objeto, {\r\n            get(target, prop, receiver) {\r\n                // Se no object target existe a prop do array e ela for do tipo \"function\"\r\n                if (props.includes(prop) && ProxyFactory._ehFuncao(target[prop])) { \r\n                   console.log(`Interceptando método ${prop}`);\r\n                   return function (){    //não pode ser arrow Function, precisa do contexto dinâmico\r\n                       // Executa os códigos extras se a função foi interceptada\r\n                       \r\n                       //Executa a função prop que foi interceptada \r\n                       let retorno = Reflect.apply(target[prop], target, arguments); // executa a função original com os parâmetros (arguments)\r\n                       acao(target);  // executa a função com o target(model) como parâmetro\r\n                       return retorno;\r\n                    }\r\n                } \r\n                 \r\n                return Reflect.get(target, prop, receiver); // executa o que não atendeu ao IF \r\n            },\r\n\r\n            set(target, prop, value, receiver) {\r\n                console.log(`Interceptando set do ${prop}`);\r\n                let retorno = Reflect.set(target, prop, value, receiver);\r\n\r\n                if (props.includes(prop)) {\r\n                    acao(target); \r\n                }\r\n                return retorno;\r\n            }\r\n        });\r\n\r\n    }\r\n    static _ehFuncao(f) {\r\n        return typeof(f)  == typeof(Function);\r\n    }\r\n}"]}