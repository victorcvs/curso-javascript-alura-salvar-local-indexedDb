{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createSores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectSore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAMA,kB,GAAS,CAAC,aAAD,C;AACTC,mB,GAAU,C;AACVC,kB,GAAS,Y;AACXC,sB,GAAa,I;AACbC,iB,GAAQ,I;;yCAECC,iB;AACT,6CAAc;AAAA;;AACV,0BAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;AACH;;;;oDAEsB;AACnB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,wCAAYI,eAAZ,GAA8B,aAAK;AAC/BT,kDAAkBU,YAAlB,CAA+BC,EAAEC,MAAF,CAASC,MAAxC;AAEH,6BAHD;;AAKAR,wCAAYS,SAAZ,GAAwB,aAAK;AACzB,oCAAG,CAAChB,UAAJ,EAAgB;AACZA,iDAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,4CAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,+CAAWC,KAAX,GAAmB,YAAY;AAC3B,8CAAM,IAAIE,KAAJ,CAAU,kCAAV,CAAN;AACH,qCAFD;AAGH;;AAEDE,wCAAQL,UAAR;AAEH,6BAXD;;AAaAO,wCAAYW,OAAZ,GAAsB,aAAK;AACvBC,wCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASC,MAAT,CAAgBM,KAA5B;AACAf,uCAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AAEH,6BAJD;AAMH,yBA3BM,CAAP;AA4BH;;;iDAEmBtB,U,EAAY;AAC5BH,+BAAO0B,OAAP,CAAe,iBAAS;AACpB,gCAAIvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EAAiD;AAC7C1B,2CAAW2B,gBAAX,CAA4BD,KAA5B;AACH;;AAED1B,uCAAW4B,iBAAX,CAA6BF,KAA7B,EAAoC,EAACG,eAAc,IAAf,EAApC;AACH,yBAND;AAQH;;;sDAEwB;AACrB,4BAAI7B,UAAJ,EAAgB;AACZC;AACA;AACAD,yCAAa,IAAb;AACH;AACJ","file":"ConnectionFactory.js","sourcesContent":["const stores = ['negociacoes'];\r\nconst version = 3;\r\nconst dbName = 'aluraframe';\r\nlet connection = null;\r\nlet close = null;\r\n    \r\nexport class ConnectionFactory {  \r\n    constructor() {\r\n        throw new Error('Não é permitido instanciar ConnectionFactory');\r\n    }\r\n\r\n    static getConnection() {\r\n        return new Promise((resolve, reject) => {\r\n            let openRequest = window.indexedDB.open(dbName, version);\r\n\r\n            openRequest.onupgradeneeded = e => {\r\n                ConnectionFactory._createSores(e.target.result);\r\n                \r\n            };\r\n            \r\n            openRequest.onsuccess = e => {\r\n                if(!connection) {\r\n                    connection = e.target.result;\r\n                    close = connection.close.bind(connection);\r\n                    connection.close = function () {   \r\n                        throw new Error(\"Não é permitido fechar a conexão\");\r\n                    }\r\n                }\r\n\r\n                resolve(connection);\r\n                \r\n            };\r\n            \r\n            openRequest.onerror = e => {\r\n                console.log(e.target.result.error);\r\n                reject(e.target.error.name);\r\n                \r\n            };\r\n            \r\n        });\r\n    }\r\n    \r\n    static _createSores(connection) {\r\n        stores.forEach(store => {\r\n            if (connection.objectStoreNames.contains(store)) {\r\n                connection.deleteObjectSore(store);\r\n            }\r\n    \r\n            connection.createObjectStore(store, {autoIncrement:true});\r\n        })\r\n\r\n    }\r\n\r\n    static closeConnection() {\r\n        if (connection) {\r\n            close();\r\n            // Reflect.apply(close, connection, []); --> outra forma de acionar sem precisar do bind\r\n            connection = null;\r\n        }\r\n    }\r\n}\r\n\r\n"]}